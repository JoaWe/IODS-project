lrn14$deep_questions <- c(lrn14$D03, lrn14$D06, lrn14$D07, lrn14$D11, lrn14$D14, lrn14$D15, lrn14$D19, lrn14$D22, lrn14$D23, lrn14$D27, lrn14$D30, lrn14$D31) )
lrn14 <- read.table("http://www.helsinki.fi/~kvehkala/JYTmooc/JYTOPKYS3-data.txt", sep="\t", header=TRUE)
# 1. "deep_questions"
lrn14$deep_questions <- c(lrn14$D03, lrn14$D06, lrn14$D07, lrn14$D11, lrn14$D14, lrn14$D15, lrn14$D19, lrn14$D22, lrn14$D23, lrn14$D27, lrn14$D30, lrn14$D31) )
install.packages("tidyverse")
library(dplyr)
#Let's try the combination of variables to "deep_questions" again:
deep_questions <- c("D03", "D11", "D19", "D27", "D07", "D14", "D22", "D30","D06",  "D15", "D23", "D31")
summarise(deep_questions)
deep questions
deep_questions
deep_columns <- select(lrn14, one_of(deep_questions))
deep_columns
#applying means to "deep_columns":
lrn14$deep <- rowMeans(deep_columns)
# combining variables to surface question
surface_questions <- c("SU02","SU10","SU18","SU26", "SU05","SU13","SU21","SU29","SU08","SU16","SU24","SU32")
surface_questions
summarise(surface_questions)
#creating "surface_columns"
surface_columns <- select(lrn14, one_of(surface_questions))
surface_columns
#applying means to "surface_columns"
lrn14$surf <- rowMeans(surface_columns)
lrn14$surf
summarise(lrn14$surf)
#creating variable "surface_questions"
strategic_questions <- c("ST01","ST09","ST17","ST25","ST04","ST12","ST20","ST28")
strategic_questions
summarise(strategic_questions)
#creating "strategic_columns"
strategic_columns <- select(lrn14, one_of (strategic_questions))
strategic_columns
#applying means to "strategic_columns"
lrn14$stra <- rowMeans(strategic_columns)
lrn14$stra
colnames(learning2014)
colnames(lrn14)
# Trying to exclude those, whose exam points equal 0
colnames(lrn14)[59] <- "points"
colnames(lrn14)
colnames(lrn14)[57] <- "age"
colnames(lrn14)
#Trying to filter those with exampoints equal to zero
lrn14 <- filter(lrn14, points > "0")
summarise(lrn14)
lrn14
View(lrn14)
install.packages(ggplot2)
install.packages("ggplot2")
# keeping columns for new dataset
keep_columns <- c("gender","Age","attitude", "deep", "stra", "surf", "Points")
learning2014 <- select (lrn14, one_of (keep_columns))
# keeping columns for new dataset
keep_columns <- c("gender","age","attitude", "deep", "stra", "surf", "points")
learning2014 <- select (lrn14, one_of (keep_columns))
# keeping columns for new dataset
keep_columns <- c("gender","age","Attitude", "deep", "stra", "surf", "points")
learning2014 <- select (lrn14, one_of (keep_columns))
str(learning2014)
# Another filtering-attempt
learning2014 <- filter(learning2014, points > "0")
summarise(learning2014)
learning2014
View(learning2014)
summary(learning2014$points)
learning2014 <- learning2014$points / 10
learning2014$points
summerize(learning2014$points)
summerise(learning2014$points)
summarise(learning2014$points)
summarise("learning2014$points")
learning2014$points
?write.csv
source('~/GitHub/IODS-project/data/create_learning2014.R')
install.packages("dplyr")
source('~/GitHub/IODS-project/data/create_learning2014.R')
rmarkdown::render("analysis.R")
lrn14 <- read.table("http://www.helsinki.fi/~kvehkala/JYTmooc/JYTOPKYS3-data.txt", sep="\t", header=TRUE)
#the data dimension:
dim(lrn14)
#the data-set's structure:
str(lrn14)
# printing and summarizing "gender"
lrn14$gender
summary(lrn14$gender)
# printing and summarizing "Age"
lrn14$Age
summary(lrn14$Age)
colnames(lrn14)
library(dplyr)
colnames(lrn14)
#Let's try the combination of variables to "deep_questions" again:
deep_questions <- c("D03", "D11", "D19", "D27", "D07", "D14", "D22", "D30","D06",  "D15", "D23", "D31")
summarise(deep_questions)
deep_questions
#creating the basic column:
deep_columns <- select(lrn14, one_of(deep_questions))
deep_columns
#applying means to "deep_columns":
lrn14$deep <- rowMeans(deep_columns)
# combining variables to "surface question"
surface_questions <- c("SU02","SU10","SU18","SU26", "SU05","SU13","SU21","SU29","SU08","SU16","SU24","SU32")
surface_questions
summarise(surface_questions)
#creating "surface_columns"
surface_columns <- select(lrn14, one_of(surface_questions))
surface_columns
#applying means to "surface_columns"
lrn14$surf <- rowMeans(surface_columns)
summarise(lrn14$surf)
#creating variable "surface_questions"
strategic_questions <- c("ST01","ST09","ST17","ST25","ST04","ST12","ST20","ST28")
strategic_questions
summarise(strategic_questions)
#creating "strategic_columns"
strategic_columns <- select(lrn14, one_of (strategic_questions))
strategic_columns
#applying means to "strategic_columns"
lrn14$stra <- rowMeans(strategic_columns)
lrn14$stra
# keeping columns for new dataset
keep_columns <- c("gender","Age","Attitude", "deep", "stra", "surf", "Points")
learning2014 <- select (lrn14, one_of (keep_columns))
str(learning2014)
# excluding exampoints equal to zero
learning2014 <- filter(learning2014, Points > "0")
learning2014
summarise(learning2014)
lrn14 <- read.table("http://www.helsinki.fi/~kvehkala/JYTmooc/JYTOPKYS3-data.txt", sep="\t", header=TRUE)
dim(lrn14)
str(lrn14)
lrn14$gender
summary(lrn14$gender)
lrn14$Age
summary(lrn14$Age)
lrn14$Points
summary(lrn14$Points)
lrn14 <- read.table("http://www.helsinki.fi/~kvehkala/JYTmooc/JYTOPKYS3-data.txt", sep="\t", header=TRUE)
dim(lrn14)
str(lrn14)
library(dplyr)
lrn14$gender
summary(lrn14$gender)
lrn14$Age
summary(lrn14$Age)
lrn14$Points
summary(lrn14$Points)
lrn14$attitude <- lrn14$Attitude / 10
lrn14$attitude
summary(lrn14$attitude)
#Let's try the combination of variables to "deep_questions" again:
deep_questions <- c("D03", "D11", "D19", "D27", "D07", "D14", "D22", "D30","D06",  "D15", "D23", "D31")
summarise(deep_questions)
deep_questions
#creating the basic column:
deep_columns <- select(lrn14, one_of(deep_questions))
deep_columns
#applying means to "deep_columns":
lrn14$deep <- rowMeans(deep_columns)
lrn14$deep
summarise(lrn14$deep)
summarise(deep_columns)
# combining variables to "surface question"
surface_questions <- c("SU02","SU10","SU18","SU26", "SU05","SU13","SU21","SU29","SU08","SU16","SU24","SU32")
surface_questions
summarise(surface_questions)
#creating "surface_columns"
surface_columns <- select(lrn14, one_of(surface_questions))
surface_columns
#applying means to "surface_columns"
lrn14$surf <- rowMeans(surface_columns)
lrn14$surf
summarise(lrn14$surf)
summarise("lrn14$surf")
#creating variable "strategic_questions"
strategic_questions <- c("ST01","ST09","ST17","ST25","ST04","ST12","ST20","ST28")
strategic_questions
summarise(strategic_questions)
#creating "strategic_columns"
strategic_columns <- select(lrn14, one_of (strategic_questions))
strategic_columns
#applying means to "strategic_columns"
lrn14$stra <- rowMeans(strategic_columns)
lrn14$stra
# keeping columns for new dataset
keep_columns <- c("gender","Age","Attitude", "deep", "stra", "surf", "Points")
learning2014 <- select (lrn14, one_of (keep_columns))
str(learning2014)
colnames((learning2014))
# Attempting to exclude those respondents who in their exams had "o" points
learning2014 <- filter(learning2014, Points > "0")
str(learning2014)
setwd("~/GitHub/IODS-project")
?write.csv
?write.table
?write.csv
write.csv(learning2014, file = "learning2014.csv")
?read.csv
?dim
dim(learning2014)
?write.csv
write.csv(learning2014, file = "\\GitHub\\IODS-project\\data\\learning2014.csv")
write.csv(learning2014, file = "C:\\Users\\Ani\\Documents\\GitHub\\IODS-project\\data\\learning2014.csv")
read.csv(learning2014, file = "C:\\Users\\Ani\\Documents\\GitHub\\IODS-project\\data\\learning2014.csv")
read.csv(learning2014, file = "C:\\Users\\Ani\\Documents\\GitHub\\IODS-project\\data\\learning2014.csv", header = TRUE)
read.csv(learning2014, file = "C:\\Users\\Ani\\Documents\\GitHub\\IODS-project\\data\\learning2014.csv", header = TRUE, sep = " ")
read.csv(learning2014, file = "C:\\Users\\Ani\\Documents\\GitHub\\IODS-project\\data\\learning2014.csv", header = TRUE, sep = ",")
read.csv(learning2014, file = "C:\\Users\\Ani\\Documents\\GitHub\\IODS-project\\data\\learning2014.csv", header = FALSE)
read.csv(learning2014, file = "C:\\Users\\Ani\\Documents\\GitHub\\IODS-project\\data\\learning2014.csv", header = TRUE)
read.table(learning2014, file = "C:\\Users\\Ani\\Documents\\GitHub\\IODS-project\\data\\learning2014.csv")
read.table(learning2014, file = "C:\\Users\\Ani\\Documents\\GitHub\\IODS-project\\data\\learning2014.csv", header = TRUE)
write.csv(learning2014, file = "C:\\Users\\Ani\\Documents\\GitHub\\IODS-project\\data\\learning2014.csv", row.names = TRUE, sep = ",")
write.csv(learning2014, file = "C:\\Users\\Ani\\Documents\\GitHub\\IODS-project\\data\\learning2014.csv", row.names = TRUE)
read.csv(learning2014, file = "C:\\Users\\Ani\\Documents\\GitHub\\IODS-project\\data\\learning2014.csv")
read.csv(learning2014, file = "C:\\Users\\Ani\\Documents\\GitHub\\IODS-project\\data\\learning2014.csv", header = TRUE)
read.csv(learning2014, file = "C:\\Users\\Ani\\Documents\\GitHub\\IODS-project\\data\\learning2014.csv", header = TRUE, sep = ",")
read.csv(learning2014, file = "C:\\Users\\Ani\\Documents\\GitHub\\IODS-project\\data\\learning2014.csv", header = FALSE, sep = ",")
read.table(learning2014, file = "C:\\Users\\Ani\\Documents\\GitHub\\IODS-project\\data\\learning2014.csv")
install.packages("MASS")
install.packages("corrplot")
str(hd)
#Reading Human development (hd) -data into R:
hd <- read.csv("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/human_development.csv", stringsAsFactors = F)
#Reading Gender Inequality Index (gii) -data into R:
gii <- read.csv("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/gender_inequality.csv", stringsAsFactors = F, na.strings = "..")
t
str(gii)
str(hd)
dim(hd)
dim(gii)
#data-summaries:
summary(hd)
summary(gii)
#Taking a look at the column-names:
colnames(hd)
colnames(gii)
#Re-naming the column-names:
new_colnames_hd <- c("HDI_Rank", "Country", "HDI", "Life_Exp", "Exp_y_Edu", "MeanEdu", "GNIpCap", "GNIR_minus_HDIR")
new_colnames_gii <- c("GII_Rank", "Country", "GII", "MatMorRatio", "Adol_Birth_Rate", "ParlRepPercent", "F_Pop_sec_Edu", "M_Pop_sec_Edu", "F_Lab_force_PR", "M_Lab_force_PR")
colnames(hd) <- new_colnames_hd
colnames(gii) <- new_colnames_gii
colnames(hd)
colnames(gii)
new_colnames_gii <- c("GII_Rank", "Country", "GII", "MatMorRatio", "Adol_Birth_Rate", "ParlRepPercent", "Edu2.F", "Edu2.M", "F_Lab_force_PR", "M_Lab_force_PR")
colnames(gii) <- new_colnames_gii
colnames(gii)
new_colnames_gii <- c("GII_Rank", "Country", "GII", "MatMorRatio", "Adol_Birth_Rate", "ParlRepPercent", "Edu2.F", "Edu2.M", "LabF", "LabM")
colnames(gii) <- new_colnames_gii
colnames(gii)
#Mutating gii-data:
gii <- mutate(gii, Edu2.FM = (Edu2.F / Edu2.M))
#Libraries:
library(dplyr)
library(ggplot2)
library(ggplot2)
#Mutating gii-data:
gii <- mutate(gii, Edu2.FM = (Edu2.F / Edu2.M))
gii <- mutate(gii, Lab.FM = (LabF / LabM))
#Joining datasets hd and gii:
human <- inner_join(hd, gii, by = c("Country"))
dim(human)
#creating new file:
write.csv(human, file = "C:\\Users\\Ani\\Documents\\GitHub\\IODS-project\\data\\human.csv",row.names = FALSE)
read.csv("C:\\Users\\Ani\\Documents\\GitHub\\IODS-project\\data\\human.csv")
dim(human$GNIpCap)
str(human$GNIpCap)
summary(human$GNIpCap)
install.packages("stringr")
#Accessing stringr-library:
library(stringr)
str(human$GNIpCap)
str_replace(human$GNIpCap, pattern = ",", replace = "") %>% as.numeric
#keeping 9 columns: "Country", "Life_Exp", "Exp_y_Edu", "GNIpCap", "MatMorRatio", "Adol_Birth_Rate", "ParlRepPercent", "Edu2.FM", and "Lab.FM":
keep <- c("Country", "Life_Exp", "Exp_y_Edu", "GNIpCap", "MatMorRatio", "Adol_Birth_Rate", "ParlRepPercent", "Edu2.FM", and "Lab.FM")
#keeping 9 columns: Country, Life_Exp, Exp_y_Edu, GNIpCap MatMorRatio, Adol_Birth_Rate, ParlRepPercent, Edu2.FM, and Lab.FM:
keep <- c("Country", "Life_Exp", "Exp_y_Edu", "GNIpCap", "MatMorRatio", "Adol_Birth_Rate", "ParlRepPercent", "Edu2.FM", "Lab.FM")
#selecting keep-columns:
human <- select(human, one_of(keep))
dim(human)
#printing completeness-indicator:
complete.cases(human)
#pprinting the data with completteness-indicator as last column:
data.frame(human[-1], comp = complete.cases(human))
#filtering out all rows with NA-values
human_ <- filter(human, complete.cases(human))
#looking at rownames for countries:
rownames(human$Country)
#looking at rownames for countries:
summary(human$Country)
#looking at rownames for countries:
str(human$Country)
#looking at rownames for countries:
tail(human, 10)
#looking at rownames for countries:
tail(human$Country, 10)
#looking at observations for countries:
human$Country
# using tail function to look at last 10 observations:
tail(human, 10)
# using tail function to look at last 10 observations:
tail(human$Country, 10)
#creating object "last":
last <- nrow(human) - 7
#Choosing everything until the "last"-data:
human_ <- human[1:last,]
#Defining rownames:
rownames(human) <- human$Country
#filtering out all rows with NA-values
human_ <- filter(human, complete.cases(human))
#looking at observations for countries:
human$Country
# using tail function to look at last 10 observations:
tail(human$Country, 10)
#creating object "last":
last <- nrow(human) - 7
#Choosing everything until the "last"-data:
human_ <- human[1:last,]
#Choosing everything until the "last"-data:
human_ <- human_[1:last,]
#filtering out all rows with NA-values
human_ <- filter(human, complete.cases(human))
#looking at observations for countries:
human$Country
# using tail function to look at last 10 observations:
tail(human$Country, 10)
#creating object "last":
last <- nrow(human) - 7
#Choosing everything until the "last"-data:
human_ <- human_[1:last,]
#filtering out all rows with NA-values
human_ <- filter(human, complete.cases(human))
#looking at observations for countries:
human_$Country
# using tail function to look at last 10 observations:
tail(human_$Country, 10)
#creating object "last":
last <- nrow(human_) - 7
#Choosing everything until the "last"-data:
human_ <- human_[1:last,]
#Defining rownames:
rownames(human_) <- human_$Country
rownames(human_$Country)
human_$Country
human_
#removing column Country:
human_$Country <- NULL
#Libraries:
library(dplyr)
library(ggplot2)
#Reading Human development (hd) -data into R:
hd <- read.csv("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/human_development.csv", stringsAsFactors = F)
#Reading Gender Inequality Index (gii) -data into R:
gii <- read.csv("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/gender_inequality.csv", stringsAsFactors = F, na.strings = "..")
#Structures and dimensions:
str(hd)
dim(hd)
str(gii)
dim(gii)
#data-summaries:
summary(hd)
summary(gii)
#Taking a look at the column-names:
colnames(hd)
colnames(gii)
#Re-naming the column-names:
new_colnames_hd <- c("HDI_Rank", "Country", "HDI", "Life_Exp", "Exp_y_Edu", "MeanEdu", "GNIpCap", "GNIR_minus_HDIR")
new_colnames_gii <- c("GII_Rank", "Country", "GII", "MatMorRatio", "Adol_Birth_Rate", "ParlRepPercent", "Edu2.F", "Edu2.M", "LabF", "LabM")
colnames(hd) <- new_colnames_hd
colnames(gii) <- new_colnames_gii
colnames(hd)
colnames(gii)
#Mutating gii-data & creating new variables:
gii <- mutate(gii, Edu2.FM = (Edu2.F / Edu2.M))
gii <- mutate(gii, Lab.FM = (LabF / LabM))
#Joining datasets hd and gii:
human <- inner_join(hd, gii, by = c("Country"))
dim(human)
#creating new file:
write.csv(human, file = "C:\\Users\\Ani\\Documents\\GitHub\\IODS-project\\human.csv",row.names = FALSE)
read.csv("C:\\Users\\Ani\\Documents\\GitHub\\IODS-project\\human.csv")
#Accessing stringr-library:
library(stringr)
str(human$GNIpCap)
str_replace(human$GNIpCap, pattern = ",", replace = "") %>% as.numeric
#keeping 9 columns: Country, Life_Exp, Exp_y_Edu, GNIpCap MatMorRatio, Adol_Birth_Rate, ParlRepPercent, Edu2.FM, and Lab.FM:
keep <- c("Country", "Life_Exp", "Exp_y_Edu", "GNIpCap", "MatMorRatio", "Adol_Birth_Rate", "ParlRepPercent", "Edu2.FM", "Lab.FM")
#selecting keep-columns:
human <- select(human, one_of(keep))
#dimensions-check to make sure, I have the 9 columns:
dim(human)
#printing completeness-indicator:
complete.cases(human)
#printing the data with completteness-indicator as last column:
data.frame(human[-1], comp = complete.cases(human))
#filtering out all rows with NA-values
human_ <- filter(human, complete.cases(human))
#looking at observations for countries:
human_$Country
# using tail function to look at last 10 observations:
tail(human_$Country, 10)
#creating object "last":
last <- nrow(human_) - 7
#Defining rownames:
rownames(human_) <- human_$Country
#removing column Country:
human_$Country <- NULL
#creating object "last":
last <- nrow(human_) - 7
#Defining rownames:
rownames(human_) <- human_$Country
#removing column Country:
human_$Country <- NULL
#Libraries:
library(dplyr)
library(ggplot2)
#Reading Human development (hd) -data into R:
hd <- read.csv("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/human_development.csv", stringsAsFactors = F)
#Reading Gender Inequality Index (gii) -data into R:
gii <- read.csv("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/gender_inequality.csv", stringsAsFactors = F, na.strings = "..")
#Structures and dimensions:
str(hd)
dim(hd)
str(gii)
dim(gii)
#data-summaries:
summary(hd)
summary(gii)
#Taking a look at the column-names:
colnames(hd)
colnames(gii)
#Re-naming the column-names:
new_colnames_hd <- c("HDI_Rank", "Country", "HDI", "Life_Exp", "Exp_y_Edu", "MeanEdu", "GNIpCap", "GNIR_minus_HDIR")
new_colnames_gii <- c("GII_Rank", "Country", "GII", "MatMorRatio", "Adol_Birth_Rate", "ParlRepPercent", "Edu2.F", "Edu2.M", "LabF", "LabM")
colnames(hd) <- new_colnames_hd
colnames(gii) <- new_colnames_gii
colnames(hd)
colnames(gii)
#Mutating gii-data & creating new variables:
gii <- mutate(gii, Edu2.FM = (Edu2.F / Edu2.M))
gii <- mutate(gii, Lab.FM = (LabF / LabM))
#Joining datasets hd and gii:
human <- inner_join(hd, gii, by = c("Country"))
dim(human)
#creating new file:
write.csv(human, file = "C:\\Users\\Ani\\Documents\\GitHub\\IODS-project\\human.csv",row.names = FALSE)
read.csv("C:\\Users\\Ani\\Documents\\GitHub\\IODS-project\\human.csv")
#Accessing stringr-library:
library(stringr)
#Changing GNIpCap to numeric:
str(human$GNIpCap)
str_replace(human$GNIpCap, pattern = ",", replace = "") %>% as.numeric
#keeping 9 columns: Country, Life_Exp, Exp_y_Edu, GNIpCap MatMorRatio, Adol_Birth_Rate, ParlRepPercent, Edu2.FM, and Lab.FM:
keep <- c("Country", "Life_Exp", "Exp_y_Edu", "GNIpCap", "MatMorRatio", "Adol_Birth_Rate", "ParlRepPercent", "Edu2.FM", "Lab.FM")
#selecting keep-columns:
human <- select(human, one_of(keep))
#dimensions-check to make sure, I have the 9 columns:
dim(human)
#printing completeness-indicator:
complete.cases(human)
#printing the data with completteness-indicator as last column:
data.frame(human[-1], comp = complete.cases(human))
#filtering out all rows with NA-values
human_ <- filter(human, complete.cases(human))
#looking at observations for countries:
human_$Country
# using tail function to look at last 10 observations:
tail(human_$Country, 10)
#creating object "last":
last <- nrow(human_) - 7
#Choosing everything until the "last"-data:
human <- human_[1:last,]
#Defining rownames:
rownames(human) <- human$Country
#removing column Country:
human$Country <- NULL
#saving the data in my data-folder:
write.csv(human, file = "C:\\Users\\Ani\\Documents\\GitHub\\IODS-project\\data\\human.csv",row.names = TRUE)
read.csv("C:\\Users\\Ani\\Documents\\GitHub\\IODS-project\\data\\human.csv")
#Libraries:
library(dplyr)
library(ggplot2)
#Reading Human development (hd) -data into R:
hd <- read.csv("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/human_development.csv", stringsAsFactors = F)
#Reading Gender Inequality Index (gii) -data into R:
gii <- read.csv("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/gender_inequality.csv", stringsAsFactors = F, na.strings = "..")
#Structures and dimensions:
str(hd)
dim(hd)
str(gii)
dim(gii)
#data-summaries:
summary(hd)
summary(gii)
#Taking a look at the column-names:
colnames(hd)
colnames(gii)
#Re-naming the column-names:
new_colnames_hd <- c("HDI_Rank", "Country", "HDI", "Life_Exp", "Exp_y_Edu", "MeanEdu", "GNIpCap", "GNIR_minus_HDIR")
new_colnames_gii <- c("GII_Rank", "Country", "GII", "MatMorRatio", "Adol_Birth_Rate", "ParlRepPercent", "Edu2.F", "Edu2.M", "LabF", "LabM")
colnames(hd) <- new_colnames_hd
colnames(gii) <- new_colnames_gii
colnames(hd)
colnames(gii)
#Mutating gii-data & creating new variables:
gii <- mutate(gii, Edu2.FM = (Edu2.F / Edu2.M))
gii <- mutate(gii, Lab.FM = (LabF / LabM))
#Joining datasets hd and gii:
human <- inner_join(hd, gii, by = c("Country"))
dim(human)
#creating new file:
write.csv(human, file = "C:\\Users\\Ani\\Documents\\GitHub\\IODS-project\\human.csv",row.names = FALSE)
